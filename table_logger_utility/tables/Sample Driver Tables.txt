return {
-- Table: {1}
{
   ["tPictureModeCommandMap"]={2},
   ["gNetworkIPAddress"]="192.168.1.196",
   ["COMMAND_QUEUE_SIZE"]=100,
   ["TV_PROXY_BINDINGID"]=5001,
   ["sqlite3"]={3},
   ["JSON"]={4},
   ["debug"]={5},
   ["C4SystemEvents"]={6},
   ["socket"]={7},
   ["gSendTimer"]={8},
   ["CMDS"]={9},
   ["TVAppDeviceID"]=1150,
   ["OneShotTimer"]={10},
   ["coroutine"]={11},
   ["Queue"]={12},
   ["PRX_CMD"]={13},
   ["NOTIFY"]={14},
   ["string"]={15},
   ["gMuteState"]={16},
   ["ON_PROPERTY_CHANGED"]={17},
   ["gTVProxyID"]=1110,
   ["gLastCheckin"]=0,
   ["RADIO_PROXY_BINDINGID"]=5011,
   ["table"]={18},
   ["gPollingTimer"]={19},
   ["gPowerState"]="OFF",
   ["gCommandQueue"]={12},
   ["CommandQueue"]={20},
   ["gReceiveBuffer"]="",
   ["gDebugTimer"]={21},
   ["tInputResponseMap"]={22},
   ["gChannelUpDownTimer"]={23},
   ["gSetInputInProgressTimer"]={24},
   ["ON_DRIVER_EARLY_INIT"]={25},
   ["gPowerOnDelayTimer"]={26},
   ["HOMEMEDIA_PROXY_BINDINGID"]=5003,
   ["bindingID"]=5001,
   ["OBJDEF"]={27},
   ["gCurrentVolume"]={28},
   ["Variables"]={29},
   ["ON_DRIVER_DESTROYED"]={30},
   ["ON_DRIVER_UPDATE"]={31},
   ["ON_DRIVER_LATEINIT"]={32},
   ["Timer"]={33},
   ["gGlobalTicketHandlers"]={34},
   ["gLastVolumeStatusValue"]={35},
   ["json"]={36},
   ["NETWORK_BINDING_ID"]=6001,
   ["tInputConnMapByName"]={37},
   ["gSendIDToMiniAppsTimer"]={38},
   ["ON_DRIVER_INIT"]={39},
   ["NETRADIO_PROXY_BINDINGID"]=5008,
   ["tInputCommandMap"]={40},
   ["tPictureFormat2d3dCommandMap"]={41},
   ["tSoundModeCommandMap"]={42},
   ["tSpeakerGroupCommandMap"]={43},
   ["tStandCommandMap"]={44},
   ["IR_BINDING_ID"]=2,
   ["WEBMEDIA_PROXY_BINDINGID"]=5006,
   ["tPowerCommandMap"]={45},
   ["CMDS_IR"]={46},
   ["Dbg"]={47},
   ["DRIVER_NAME"]="BangOlufsen BeoVision-Eclipse-55",
   ["gControlMethod"]="Network",
   ["io"]={48},
   ["Log"]={49},
   ["DEFAULT_PROXY_BINDINGID"]=5001,
   ["PersistData"]={50},
   ["_G"]={1},
   ["gNetworkReconnectTimer"]={51},
   ["gLastSelectedInput"]="",
   ["gNetworkStatus"]="OFFLINE",
   ["gRecoverInputSelectionTimer"]={52},
   ["EX_CMD"]={53},
   ["PROTOCOL_DECLARATIONS"]={54},
   ["gTimerLibTimers"]={55},
   ["SAT_PROXY_BINDINGID"]=5014,
   ["package"]={56},
   ["bit"]={57},
   ["_VERSION"]="Lua 5.1",
   ["gVolumeRamping"]={58},
   ["RECORDINGS_PROXY_BINDINGID"]=5012,
   ["gTimerLibTimerCurID"]=9,
   ["YOUTUBE_PROXY_BINDINGID"]=5007,
   ["Properties"]={59},
   ["os"]={60},
   ["SPOTIFY_PROXY_BINDINGID"]=5005,
   ["LuaC4Object"]={61},
   ["DEEZER_PROXY_BINDINGID"]=5002,
   ["tInputConnMapByID"]={62},
   ["NETWORK_PORT"]=8080,
   ["SERIAL_BINDING_ID"]=1,
   ["math"]={63},
   ["DEV_MSG"]={64},
   ["LUA_ACTION"]={65},
   ["DVBRADIO_PROXY_BINDINGID"]=5013,
},
-- Table: {2}
{
   ["Auto Power Save"]={66},
   ["Standard"]={67},
   ["Vivid"]={68},
   ["HDR Effect"]={69},
   ["Cinema"]={70},
   ["Expert (Dark Room)"]={71},
   ["Game"]={72},
   ["Sports"]={73},
   ["Expert (Bright Room)"]={74},
},
-- Table: {3}
{
   ["FULL"]=13,
   ["LOCKED"]=6,
   ["TOOBIG"]=18,
   ["MISMATCH"]=20,
   ["TEXT"]=3,
   ["SCHEMA"]=17,
   ["EMPTY"]=16,
   ["CONSTRAINT"]=19,
   ["NOLFS"]=22,
   ["OK"]=0,
   ["NOTADB"]=26,
   ["MISUSE"]=21,
   ["INTERRUPT"]=9,
   ["NOTFOUND"]=12,
   ["RANGE"]=25,
   ["CANTOPEN"]=14,
   ["ROW"]=100,
   ["PROTOCOL"]=15,
   ["NULL"]=5,
   ["BLOB"]=4,
   ["ERROR"]=1,
   ["FLOAT"]=2,
   ["BUSY"]=5,
   ["PERM"]=3,
   ["INTERNAL"]=2,
   ["INTEGER"]=1,
   ["FORMAT"]=24,
   ["DONE"]=101,
   ["IOERR"]=10,
   ["ABORT"]=4,
   ["CORRUPT"]=11,
   ["READONLY"]=8,
   ["NOMEM"]=7,
},
-- Table: {4}
{
},
-- Table: {5}
{
},
-- Table: {6}
{
   ["OnProjectLocked"]="46",
   ["OnLocaleChanged"]="58",
   ["OnZigbeeNodeOffline"]="77",
   ["OnLatitudeChanged"]="53",
   ["OnCodeItemRemoved"]="22",
   ["OnPhysicalDeviceAdded"]="30",
   ["OnVariableRemoved"]="36",
   ["OnSystemUpdateStarted"]="86",
   ["OnVariableBindingRemoved"]="40",
   ["OnSDDPDeviceStatus"]="78",
   ["OnDeviceUserInitiatedRemove"]="92",
   ["OnMediaZoneChanged"]="67",
   ["OnSongAddedToPlaylist"]="28",
   ["OnItemDataChanged"]="9",
   ["OnItemAdded"]="7",
   ["OnSongRemovedFromPlaylist"]="29",
   ["OnItemMoved"]="12",
   ["OnSystemShutDown"]="85",
   ["OnProjectLoaded"]="5",
   ["OnDataToUI"]="32",
   ["OnZigbeeNodesChanged"]="59",
   ["OnDiscoveredDeviceChanged"]="96",
   ["OnVariableAdded"]="34",
   ["OnVariableChanged"]="38",
   ["OnMediaDeviceChanged"]="68",
   ["OnDeviceOnline"]="48",
   ["OnCodeItemDisplayUpdated"]="101",
   ["OnZigbeeNodeUpdateSucceeded"]="74",
   ["OnZigbeeMeshChanged"]="61",
   ["OnItemNameChanged"]="8",
   ["OnCodeItemEnabled"]="100",
   ["OnZigbeeZserverChanged"]="62",
   ["OnZigbeeZapsChanged"]="60",
   ["OnBindingEntryRenamed"]="99",
   ["OnBindingEntryRemoved"]="83",
   ["OnBindingAdded"]="15",
   ["OnPhysicalDeviceRemoved"]="31",
   ["OnNetworkBindingAdded"]="17",
   ["OnDeviceAlreadyIdentified"]="55",
   ["OnDeviceIPAddressChanged"]="97",
   ["OnDeviceIdentifying"]="88",
   ["OnVariableBindingAdded"]="39",
   ["OnNetworkBindingUnregistered"]="20",
   ["OnDiscoveredDeviceRemoved"]="95",
   ["OnDeviceCancelIdentify"]="89",
   ["OnDiscoveredDeviceAdded"]="94",
   ["OnDriverAdded"]="13",
   ["OnAccountInfoUpdated"]="80",
   ["OnDriverDisabled"]="93",
   ["OnSDDPDeviceDiscover"]="79",
   ["OnCIDRRulesChanged"]="98",
   ["OnDirectorIPAddressChanged"]="90",
   ["OnAccountInfoUpdating"]="81",
   ["OnDevicePreIdentify"]="87",
   ["OnZigBeeStickPresent"]="71",
   ["OnDeviceIdentified"]="14",
   ["OnProjectNew"]="4",
   ["OnMediaDeviceRemoved"]="45",
   ["OnProjectClear"]="84",
   ["OnNetworkBindingRemoved"]="18",
   ["OnBindingEntryAdded"]="82",
   ["OnPIP"]="6",
   ["OnZigbeeNodeOnline"]="76",
   ["OnVariableBindingRenamed"]="41",
   ["OnUserVariableAdded"]="35",
   ["OnVariableRemovedFromBinding"]="43",
   ["OnDeviceOffline"]="49",
   ["OnZigbeeNodeUpdateStatus"]="73",
   ["OnVariableRenamed"]="37",
   ["OnZigBeeStickRemoved"]="72",
   ["OnDeviceIdentifiedNoLicense"]="70",
   ["OnProjectEnterLock"]="69",
   ["OnMediaRemovedFromDevice"]="26",
   ["OnMediaZoneAdded"]="65",
   ["OnTimezoneChanged"]="64",
   ["OnProjectLeaveLock"]="47",
   ["OnMediaInfoModified"]="25",
   ["OnMediaDeviceAdded"]="44",
   ["OnNetworkBindingStatusChanged"]="51",
   ["OnMediaDataRemoved"]="27",
   ["OnSearchTypeFound"]="50",
   ["OnMediaZoneRemoved"]="66",
   ["OnControllerDisabled"]="56",
   ["OnAlive"]="2",
   ["OnProjectChanged"]="3",
   ["OnLongitudeChanged"]="54",
   ["OnNetworkBindingRegistered"]="19",
   ["OnItemRemoved"]="11",
   ["OnDeviceFirmwareChanged"]="57",
   ["OnCodeItemAdded"]="21",
   ["OnBindingRemoved"]="16",
   ["OnCodeItemMoved"]="23",
   ["OnZigbeeNodeUpdateFailed"]="75",
   ["OnMediaInfoAdded"]="24",
   ["OnZipcodeChanged"]="52",
   ["OnVariableAddedToBinding"]="42",
   ["OnAll"]="1",
   ["OnDeviceDataChanged"]="10",
   ["OnAccessModeChanged"]="33",
   ["OnDeviceDiscovered"]="91",
   ["OnSysmanResponse"]="63",
},
-- Table: {7}
{
   ["dns"]={75},
   ["_VERSION"]="LuaSocket 2.0.2",
},
-- Table: {8}
{
   ["_name"]="SendCommand",
   ["_id"]=0,
   ["_units"]="MILLISECONDS",
   ["_info"]="",
   ["_timerID"]=8,
},
-- Table: {9}
{
   ["START_CH_UP"]="",
   ["CLOSE"]="",
   ["PULSE_CH_UP"]="",
   ["NUMBER_5"]="",
   ["PULSE_CH_DOWN"]="",
   ["PREV"]="",
   ["PUSLE_VOL_DOWN"]="",
   ["MUTE_TOGGLE"]="",
   ["INPUT_TOGGLE"]="",
   ["START_CH_DOWN"]="",
   ["GUIDE"]="",
   ["OFF"]="",
   ["DOWN"]="",
   ["STOP_CH_UP"]="",
   ["LEFT"]="",
   ["PROGRAM_C"]="",
   ["PROGRAM_D"]="",
   ["PROGRAM_B"]="",
   ["STOP_CH_DOWN"]="",
   ["CANCEL"]="",
   ["MUTE_ON"]="",
   ["PROGRAM_A"]="",
   ["STOP"]="",
   ["SKIP_REV"]="",
   ["SKIP_FWD"]="",
   ["DOT"]="",
   ["SCAN_FWD"]="",
   ["PLAY"]="",
   ["NUMBER_1"]="",
   ["SCAN_REV"]="",
   ["NUMBER_8"]="",
   ["ENTER"]="",
   ["UP"]="",
   ["OPEN_CLOSE"]="",
   ["OPEN"]="",
   ["PAUSE"]="",
   ["NUMBER_4"]="",
   ["NUMBER_9"]="",
   ["RIGHT"]="",
   ["NUMBER_7"]="",
   ["MUTE_OFF"]="",
   ["NUMBER_3"]="",
   ["PULSE_VOL_UP"]="",
   ["NUMBER_2"]="",
   ["NUMBER_0"]="",
   ["INFO"]="",
   ["PAGE_UP"]="",
   ["MENU"]="",
   ["RECALL"]="",
   ["PAGE_DOWN"]="",
   ["STAR"]="",
   ["ON"]="",
   ["NUMBER_6"]="",
},
-- Table: {10}
{
},
-- Table: {11}
{
},
-- Table: {12}
{
   ["_et"]={76},
   ["_maxSize"]=100,
},
-- Table: {13}
{
},
-- Table: {14}
{
},
-- Table: {15}
{
},
-- Table: {16}
{
   [0]="False",
},
-- Table: {17}
{
},
-- Table: {18}
{
},
-- Table: {19}
{
   ["_name"]="PollingTimer",
   ["_id"]=7638,
   ["_units"]="SECONDS",
   ["_info"]="",
   ["_interval"]=60,
   ["_timerID"]=9,
},
-- Table: {20}
{
},
-- Table: {21}
{
   ["_name"]="Debug",
   ["_id"]=0,
   ["_units"]="MINUTES",
   ["_info"]="",
   ["_interval"]=45,
   ["_timerID"]=7,
},
-- Table: {22}
{
   ["HDMI5"]="hdmi_5",
   ["HDMIA"]="hdmi_1",
   ["HDMIC"]="hdmi_3",
   ["LGHDMI4"]="hdmi_14",
   ["HDMI1"]="hdmi_1",
   ["HDMI6"]="hdmi_6",
   ["MATRIX2"]="hdmi_matrix_2",
   ["WEBMEDIA"]="webmedia",
   ["MATRIX6"]="hdmi_matrix_6",
   ["MATRIX5"]="hdmi_matrix_5",
   ["MATRIX3"]="hdmi_matrix_3",
   ["HDMI2"]="hdmi_2",
   ["YOUTUBE"]="youtube",
   ["SPOTIFY"]="spotify",
   ["MATRIX14"]="hdmi_matrix_14",
   ["DVB_RADIO"]="dvb_radio",
   ["MATRIX8"]="hdmi_matrix_8",
   ["NET RADIO"]="netradio",
   ["HDMIB"]="hdmi_2",
   ["HDMI4"]="hdmi_4",
   ["MATRIX12"]="hdmi_matrix_12",
   ["CD"]="CD",
   ["HDMI3"]="hdmi_3",
   ["MATRIX15"]="hdmi_matrix_15",
   ["MATRIX1"]="hdmi_matrix_1",
   ["HDMID"]="hdmi_4",
   ["MATRIX9"]="hdmi_matrix_9",
   ["DEEZER"]="deezer",
   ["TV"]="tv",
   ["RECORDINGS"]="recordings",
   ["SAT"]="sat",
   ["TUNEIN"]="tunein",
   ["TOS LINK"]="toslink",
   ["MATRIX16"]="hdmi_matrix_16",
   ["LINE IN"]="linein",
   ["MATRIX4"]="hdmi_matrix_4",
   ["LGHDMI3"]="hdmi_13",
   ["MATRIX7"]="hdmi_matrix_7",
   ["A.AUX"]="AUX_A",
   ["RADIO"]="radio",
   ["AV IN"]="av",
   ["MUSIC"]="music",
   ["MATRIX13"]="hdmi_matrix_13",
   ["MATRIX11"]="hdmi_matrix_11",
   ["MATRIX10"]="hdmi_matrix_10",
   ["HOMEMEDIA"]="homemedia",
   ["LGHDMI1"]="hdmi_11",
},
-- Table: {23}
{
   ["_name"]="ChannelUpDownTimer",
   ["_id"]=0,
   ["_units"]="SECONDS",
   ["_info"]="",
   ["_interval"]=45,
   ["_timerID"]=4,
},
-- Table: {24}
{
   ["_name"]="SetInputInProgressTimer",
   ["_id"]=0,
   ["_units"]="SECONDS",
   ["_info"]="",
   ["_interval"]=60,
   ["_timerID"]=3,
},
-- Table: {25}
{
},
-- Table: {26}
{
   ["_name"]="PowerOnDelayTimer",
   ["_id"]=0,
   ["_units"]="SECONDS",
   ["_info"]="",
   ["_interval"]=12,
   ["_timerID"]=1,
},
-- Table: {27}
{
   ["__index"]={27},
   ["URL"]="http://regex.info/blog/",
   ["VERSION"]=20111207.5,
   ["COPYRIGHT"]="2010-2011 Jeffrey Friedl",
},
-- Table: {28}
{
},
-- Table: {29}
{
},
-- Table: {30}
{
},
-- Table: {31}
{
},
-- Table: {32}
{
},
-- Table: {33}
{
},
-- Table: {34}
{
   {77},
   {78},
   {79},
   {80},
   {81},
   {82},
   {83},
   {84},
   {85},
   {86},
   {87},
   {88},
   {89},
   {90},
   {91},
   {92},
   {93},
   {94},
   {95},
   {96},
   {97},
   {98},
   {99},
   {100},
   {101},
   {102},
   {103},
   {104},
   {105},
   {106},
   {107},
},
-- Table: {35}
{
   [0]=0,
},
-- Table: {36}
{
   ["_NAME"]="json",
   ["_PACKAGE"]="",
   ["_M"]={36},
   ["OBJDEF"]={108},
   ["JSON_LIBRARY_CHUNK"]="--\
-- Copyright 2010-2011 Jeffrey Friedl\
-- http://regex.info/blog/\
--\
local COPYRIGHT = \"2010-2011 Jeffrey Friedl\"\
local URL       = \"http://regex.info/blog/\"\
local VERSION   = 20111207.5  -- version history at end of file\
OBJDEF = { VERSION = VERSION, URL = URL, COPYRIGHT = COPYRIGHT }\
\
--\
-- Simple JSON encoding and decoding in pure Lua.\
-- http://www.json.org/\
--\
--\
--   JSON = loadfile \"JSON.lua\" -- one-time load of the routines\
--\
--   local lua_value = JSON:decode(raw_json_text)\
--\
--   local raw_json_text    = JSON:encode(lua_table_or_value)\
--   local pretty_json_text = JSON:encode_pretty(lua_table_or_value) -- \"pretty printed\" version for human readability\
--\
--\
-- DECODING\
--\
--   JSON = (loadfile \"JSON.lua\")() -- one-time load of the routines\
--\
--   local lua_value = JSON:decode(raw_json_text)\
--\
--   If the JSON text is for an object or an array, e.g.\
--     { \"what\": \"books\", \"count\": 3 }\
--   or\
--     [ \"Larry\", \"Curly\", \"Moe\" ]\
--\
--   the result is a Lua table, e.g.\
--     { what = \"books\", count = 3 }\
--   or\
--     { \"Larry\", \"Curly\", \"Moe\" }\
--\
--\
--   The encode and decode routines accept an optional second argument, \"etc\", which is not used\
--   during encoding or decoding, but upon error is passed along to error handlers. It can be of any\
--   type (including nil).\
--\
--   With most errors during decoding, this code calls\
--\
--      JSON:onDecodeError(message, text, location, etc)\
--\
--   with a message about the error, and if known, the JSON text being parsed and the byte count\
--   where the problem was discovered. You can replace the default JSON:onDecodeError() with your\
--   own function.\
--\
--   The default onDecodeError() merely augments the message with data about the text and the\
--   location if known (and if a second 'etc' argument had been provided to decode(), its value is\
--   tacked onto the message as well), and then calls JSON.assert(), which itself defaults to Lua's\
--   built-in assert(), and can also be overridden.\
--\
--   For example, in an Adobe Lightroom plugin, you might use something like\
--\
--          function JSON:onDecodeError(message, text, location, etc)\
--             LrErrors.throwUserError(\"Internal Error: invalid JSON data\")\
--          end\
--\
--   or even just\
--\
--          function JSON.assert(message)\
--             LrErrors.throwUserError(\"Internal Error: \" .. message)\
--          end\
--\
--   If JSON:decode() is passed a nil, this is called instead:\
--\
--      JSON:onDecodeOfNilError(message, nil, nil, etc)\
--\
--   and if JSON:decode() is passed HTML instead of JSON, this is called:\
--\
--      JSON:onDecodeOfHTMLError(message, text, nil, etc)\
--\
--   The use of the fourth 'etc' argument allows stronger coordination between decoding and error\
--   reporting, especially when you provide your own error-handling routines. Continuing with the\
--   the Adobe Lightroom plugin example:\
--\
--          function JSON:onDecodeError(message, text, location, etc)\
--             local note = \"Internal Error: invalid JSON data\"\
--             if type(etc) = 'table' and etc.photo then\
--                note = note .. \" while processing for \" .. etc.photo:getFormattedMetadata('fileName')\
--             end\
--             LrErrors.throwUserError(note)\
--          end\
--\
--            :\
--            :\
--\
--          for i, photo in ipairs(photosToProcess) do\
--               :\
--               :\
--               local data = JSON:decode(someJsonText, { photo = photo })\
--               :\
--               :\
--          end\
--\
--\
--\
--\
\
-- DECODING AND STRICT TYPES\
--\
--   Because both JSON objects and JSON arrays are converted to Lua tables, it's not normally\
--   possible to tell which a Lua table came from, or guarantee decode-encode round-trip\
--   equivalency.\
--\
--   However, if you enable strictTypes, e.g.\
--\
--      JSON = (loadfile \"JSON.lua\")() --load the routines\
--      JSON.strictTypes = true\
--\
--   then the Lua table resulting from the decoding of a JSON object or JSON array is marked via Lua\
--   metatable, so that when re-encoded with JSON:encode() it ends up as the appropriate JSON type.\
--\
--   (This is not the default because other routines may not work well with tables that have a\
--   metatable set, for example, Lightroom API calls.)\
--\
--\
-- ENCODING\
--\
--   JSON = (loadfile \"JSON.lua\")() -- one-time load of the routines\
--\
--   local raw_json_text    = JSON:encode(lua_table_or_value)\
--   local pretty_json_text = JSON:encode_pretty(lua_table_or_value) -- \"pretty printed\" version for human readability\
\
--   On error during encoding, this code calls:\
--\
--    JSON:onEncodeError(message, etc)\
--\
--   which you can override in your local JSON object.\
--\
--\
-- SUMMARY OF METHODS YOU CAN OVERRIDE IN YOUR LOCAL LUA JSON OBJECT\
--\
--    assert\
--    onDecodeError\
--    onDecodeOfNilError\
--    onDecodeOfHTMLError\
--    onEncodeError\
--\
--  If you want to create a separate Lua JSON object with its own error handlers,\
--  you can reload JSON.lua or use the :new() method.\
--\
---------------------------------------------------------------------------\
\
\
local author = \"-[ JSON.lua package by Jeffrey Friedl (http://regex.info/blog/lua/json), version \" .. tostring(VERSION) .. \" ]-\"\
local isArray  = { __tostring = function() return \"JSON array\"  end }    isArray.__index  = isArray\
local isObject = { __tostring = function() return \"JSON object\" end }    isObject.__index = isObject\
\
\
function OBJDEF:newArray(tbl)\
   return setmetatable(tbl or {}, isArray)\
end\
\
function OBJDEF:newObject(tbl)\
   return setmetatable(tbl or {}, isObject)\
end\
\
local function unicode_codepoint_as_utf8(codepoint)\
   --\
   -- codepoint is a number\
   --\
   if codepoint <= 127 then\
      return string.char(codepoint)\
\
   elseif codepoint <= 2047 then\
      --\
      -- 110yyyxx 10xxxxxx         <-- useful notation from http://en.wikipedia.org/wiki/Utf8\
      --\
      local highpart = math.floor(codepoint / 0x40)\
      local lowpart  = codepoint - (0x40 * highpart)\
      return string.char(0xC0 + highpart,\
                         0x80 + lowpart)\
\
   elseif codepoint <= 65535 then\
      --\
      -- 1110yyyy 10yyyyxx 10xxxxxx\
      --\
      local highpart  = math.floor(codepoint / 0x1000)\
      local remainder = codepoint - 0x1000 * highpart\
      local midpart   = math.floor(remainder / 0x40)\
      local lowpart   = remainder - 0x40 * midpart\
\
      highpart = 0xE0 + highpart\
      midpart  = 0x80 + midpart\
      lowpart  = 0x80 + lowpart\
\
      --\
      -- Check for an invalid character (thanks Andy R. at Adobe).\
      -- See table 3.7, page 93, in http://www.unicode.org/versions/Unicode5.2.0/ch03.pdf#G28070\
      --\
      if ( highpart == 0xE0 and midpart < 0xA0 ) or\
         ( highpart == 0xED and midpart > 0x9F ) or\
         ( highpart == 0xF0 and midpart < 0x90 ) or\
         ( highpart == 0xF4 and midpart > 0x8F )\
      then\
         return \"?\"\
      else\
         return string.char(highpart,\
                            midpart,\
                            lowpart)\
      end\
\
   else\
      --\
      -- 11110zzz 10zzyyyy 10yyyyxx 10xxxxxx\
      --\
      local highpart  = math.floor(codepoint / 0x40000)\
      local remainder = codepoint - 0x40000 * highpart\
      local midA      = math.floor(remainder / 0x1000)\
      remainder       = remainder - 0x1000 * midA\
      local midB      = math.floor(remainder / 0x40)\
      local lowpart   = remainder - 0x40 * midB\
\
      return string.char(0xF0 + highpart,\
                         0x80 + midA,\
                         0x80 + midB,\
                         0x80 + lowpart)\
   end\
end\
\
function OBJDEF:onDecodeError(message, text, location, etc)\
   if text then\
      if location then\
         message = string.format(\"%s at char %d of: %s\", message, location, text)\
      else\
         message = string.format(\"%s: %s\", message, text)\
      end\
   end\
   if etc ~= nil then\
      message = message .. \" (\" .. OBJDEF:encode(etc) .. \")\"\
   end\
\
   if self.assert then\
      self.assert(false, message)\
   else\
      assert(false, message)\
   end\
end\
\
OBJDEF.onDecodeOfNilError  = OBJDEF.onDecodeError\
OBJDEF.onDecodeOfHTMLError = OBJDEF.onDecodeError\
\
function OBJDEF:onEncodeError(message, etc)\
   if etc ~= nil then\
      message = message .. \" (\" .. OBJDEF:encode(etc) .. \")\"\
   end\
\
   if self.assert then\
      self.assert(false, message)\
   else\
      assert(false, message)\
   end\
end\
\
local function grok_number(self, text, start, etc)\
   --\
   -- Grab the integer part\
   --\
   local integer_part = text:match('^-?[1-9]%d*', start)\
                     or text:match(\"^-?0\",        start)\
\
   if not integer_part then\
      self:onDecodeError(\"expected number\", text, start, etc)\
   end\
\
   local i = start + integer_part:len()\
\
   --\
   -- Grab an optional decimal part -- now with comma-separated decimal support (probably won't happen as JSON standard suggests only period-separated decimals)\
   --\
   local decimal_part = text:match('^[%.%,]%d+', i) or \"\"\
\
   i = i + decimal_part:len()\
\
   --\
   -- Grab an optional exponential part\
   --\
   local exponent_part = text:match('^[eE][-+]?%d+', i) or \"\"\
\
   i = i + exponent_part:len()\
\
   local full_number_text = integer_part .. decimal_part .. exponent_part\
\
   -- localized function to handle comma-separated decimals\
\
	local tonumber_loc = function (str, base)\
		local s = str:gsub(\",\", \".\") -- Assume US Locale decimal separator\
		local num = tonumber(s, base)\
		if (num == nil) then\
			s = str:gsub(\"%.\", \",\") -- Non-US Locale decimal separator\
			num = tonumber(s, base)\
		end\
		return num\
	end\
\
   local as_number = tonumber_loc (full_number_text)\
\
   if not as_number then\
      self:onDecodeError(\"bad number\", text, start, etc)\
   end\
\
   return as_number, i\
end\
\
\
local function grok_string(self, text, start, etc)\
\
   if text:sub(start,start) ~= '\"' then\
      self:onDecodeError(\"expected string's opening quote\", text, start, etc)\
   end\
\
   local i = start + 1 -- +1 to bypass the initial quote\
   local text_len = text:len()\
   local VALUE = \"\"\
   while i <= text_len do\
      local c = text:sub(i,i)\
      if c == '\"' then\
         return VALUE, i + 1\
      end\
      if c ~= '\\\\' then\
         VALUE = VALUE .. c\
         i = i + 1\
      elseif text:match('^\\\\b', i) then\
         VALUE = VALUE .. \"\\b\"\
         i = i + 2\
      elseif text:match('^\\\\f', i) then\
         VALUE = VALUE .. \"\\f\"\
         i = i + 2\
      elseif text:match('^\\\\n', i) then\
         VALUE = VALUE .. \"\\n\"\
         i = i + 2\
      elseif text:match('^\\\\r', i) then\
         VALUE = VALUE .. \"\\r\"\
         i = i + 2\
      elseif text:match('^\\\\t', i) then\
         VALUE = VALUE .. \"\\t\"\
         i = i + 2\
      else\
         local hex = text:match('^\\\\u([0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])', i)\
         if hex then\
            i = i + 6 -- bypass what we just read\
\
            -- We have a Unicode codepoint. It could be standalone, or if in the proper range and\
            -- followed by another in a specific range, it'll be a two-code surrogate pair.\
            local codepoint = tonumber(hex, 16)\
            if codepoint >= 0xD800 and codepoint <= 0xDBFF then\
               -- it's a hi surrogate... see whether we have a following low\
               local lo_surrogate = text:match('^\\\\u([dD][cdefCDEF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])', i)\
               if lo_surrogate then\
                  i = i + 6 -- bypass the low surrogate we just read\
                  codepoint = 0x2400 + (codepoint - 0xD800) * 0x400 + tonumber(lo_surrogate, 16)\
               else\
                  -- not a proper low, so we'll just leave the first codepoint as is and spit it out.\
               end\
            end\
            VALUE = VALUE .. unicode_codepoint_as_utf8(codepoint)\
\
         else\
\
            -- just pass through what's escaped\
            VALUE = VALUE .. text:match('^\\\\(.)', i)\
            i = i + 2\
         end\
      end\
   end\
\
   self:onDecodeError(\"unclosed string\", text, start, etc)\
end\
\
local function skip_whitespace(text, start)\
\
   local match_start, match_end = text:find(\"^[ \\n\\r\\t]+\", start) -- [http://www.ietf.org/rfc/rfc4627.txt] Section 2\
   if match_end then\
      return match_end + 1\
   else\
      return start\
   end\
end\
\
local grok_one -- assigned later\
\
local function grok_object(self, text, start, etc)\
   if not text:sub(start,start) == '{' then\
      self:onDecodeError(\"expected '{'\", text, start, etc)\
   end\
\
   local i = skip_whitespace(text, start + 1) -- +1 to skip the '{'\
\
   local VALUE = self.strictTypes and self:newObject { } or { }\
\
   if text:sub(i,i) == '}' then\
      return VALUE, i + 1\
   end\
   local text_len = text:len()\
   while i <= text_len do\
      local key, new_i = grok_string(self, text, i, etc)\
\
      i = skip_whitespace(text, new_i)\
\
      if text:sub(i, i) ~= ':' then\
         self:onDecodeError(\"expected colon\", text, i, etc)\
      end\
\
      i = skip_whitespace(text, i + 1)\
\
      local val, new_i = grok_one(self, text, i)\
\
      VALUE[key] = val\
\
      --\
      -- Expect now either '}' to end things, or a ',' to allow us to continue.\
      --\
      i = skip_whitespace(text, new_i)\
\
      local c = text:sub(i,i)\
\
      if c == '}' then\
         return VALUE, i + 1\
      end\
\
      if text:sub(i, i) ~= ',' then\
         self:onDecodeError(\"expected comma or '}'\", text, i, etc)\
      end\
\
      i = skip_whitespace(text, i + 1)\
   end\
\
   self:onDecodeError(\"unclosed '{'\", text, start, etc)\
end\
\
local function grok_array(self, text, start, etc)\
   if not text:sub(start,start) == '[' then\
      self:onDecodeError(\"expected '['\", text, start, etc)\
   end\
\
   local i = skip_whitespace(text, start + 1) -- +1 to skip the '['\
   local VALUE = self.strictTypes and self:newArray { } or { }\
   if text:sub(i,i) == ']' then\
      return VALUE, i + 1\
   end\
\
   local text_len = text:len()\
   while i <= text_len do\
      local val, new_i = grok_one(self, text, i)\
\
      table.insert(VALUE, val)\
\
      i = skip_whitespace(text, new_i)\
\
      --\
      -- Expect now either ']' to end things, or a ',' to allow us to continue.\
      --\
      local c = text:sub(i,i)\
      if c == ']' then\
         return VALUE, i + 1\
      end\
      if text:sub(i, i) ~= ',' then\
         self:onDecodeError(\"expected comma or '['\", text, i, etc)\
      end\
      i = skip_whitespace(text, i + 1)\
   end\
   self:onDecodeError(\"unclosed '['\", text, start, etc)\
end\
\
\
grok_one = function(self, text, start, etc)\
   -- Skip any whitespace\
   start = skip_whitespace(text, start)\
\
   if start > text:len() then\
      self:onDecodeError(\"unexpected end of string\", text, nil, etc)\
   end\
\
   if text:find('^\"', start) then\
      return grok_string(self, text, start, etc)\
\
   elseif text:find('^[-0123456789 ]', start) then\
      return grok_number(self, text, start, etc)\
\
   elseif text:find('^%{', start) then\
      return grok_object(self, text, start, etc)\
\
   elseif text:find('^%[', start) then\
      return grok_array(self, text, start, etc)\
\
   elseif text:find('^true', start) then\
      return true, start + 4\
\
   elseif text:find('^false', start) then\
      return false, start + 5\
\
   elseif text:find('^null', start) then\
      return nil, start + 4\
\
   else\
      self:onDecodeError(\"can't parse JSON\", text, start, etc)\
   end\
end\
\
function OBJDEF:decode(text, etc)\
   if type(self) ~= 'table' or self.__index ~= OBJDEF then\
      OBJDEF:onDecodeError(\"JSON:decode must be called in method format\", nil, nil, etc)\
   end\
\
   if text == nil then\
      self:onDecodeOfNilError(string.format(\"nil passed to JSON:decode()\"), nil, nil, etc)\
   elseif type(text) ~= 'string' then\
      self:onDecodeError(string.format(\"expected string argument to JSON:decode(), got %s\", type(text)), nil, nil, etc)\
   end\
\
   if text:match('^%s*$') then\
      return nil\
   end\
\
   if text:match('^%s*<') then\
      -- Can't be JSON... we'll assume it's HTML\
      self:onDecodeOfHTMLError(string.format(\"html passed to JSON:decode()\"), text, nil, etc)\
   end\
\
   --\
   -- Ensure that it's not UTF-32 or UTF-16.\
   -- Those are perfectly valid encodings for JSON (as per RFC 4627 section 3),\
   -- but this package can't handle them.\
   --\
   if text:sub(1,1):byte() == 0 or (text:len() >= 2 and text:sub(2,2):byte() == 0) then\
      self:onDecodeError(\"JSON package groks only UTF-8, sorry\", text, nil, etc)\
   end\
\
   local success, value = pcall(grok_one, self, text, 1, etc)\
   if success then\
      return value\
   else\
      -- should never get here... JSON parse errors should have been caught earlier\
      assert(false, value)\
      return nil\
   end\
end\
\
local function backslash_replacement_function(c)\
   if c == \"\\n\" then\
      return \"\\\\n\"\
   elseif c == \"\\r\" then\
      return \"\\\\r\"\
   elseif c == \"\\t\" then\
      return \"\\\\t\"\
   elseif c == \"\\b\" then\
      return \"\\\\b\"\
   elseif c == \"\\f\" then\
      return \"\\\\f\"\
   elseif c == '\"' then\
      return '\\\\\"'\
   elseif c == '\\\\' then\
      return '\\\\\\\\'\
   else\
      return string.format(\"\\\\u%04x\", c:byte())\
   end\
end\
\
local chars_to_be_escaped_in_JSON_string\
   = '['\
   ..    '\"'    -- class sub-pattern to match a double quote\
   ..    '%\\\\'  -- class sub-pattern to match a backslash\
   ..    '%z'   -- class sub-pattern to match a null\
   ..    '\\001' .. '-' .. '\\031' -- class sub-pattern to match control characters\
   .. ']'\
\
local function json_string_literal(value)\
   local newval = value:gsub(chars_to_be_escaped_in_JSON_string, backslash_replacement_function)\
   return '\"' .. newval .. '\"'\
end\
\
local function object_or_array(self, T, etc)\
   --\
   -- We need to inspect all the keys... if there are any strings, we'll convert to a JSON\
   -- object. If there are only numbers, it's a JSON array.\
   --\
   -- If we'll be converting to a JSON object, we'll want to sort the keys so that the\
   -- end result is deterministic.\
   --\
   local string_keys = { }\
   local seen_number_key = false\
   local maximum_number_key\
\
   for key in pairs(T) do\
      if type(key) == 'number' then\
         seen_number_key = true\
         if not maximum_number_key or maximum_number_key < key then\
            maximum_number_key = key\
         end\
      elseif type(key) == 'string' then\
         table.insert(string_keys, key)\
      else\
         self:onEncodeError(\"can't encode table with a key of type \" .. type(key), etc)\
      end\
   end\
\
   if seen_number_key and #string_keys > 0 then\
      --\
      -- Mixed key types... don't know what to do, so bail\
      --\
      self:onEncodeError(\"a table with both numeric and string keys could be an object or array; aborting\", etc)\
\
   elseif #string_keys == 0  then\
      --\
      -- An array\
      --\
      if seen_number_key then\
         return nil, maximum_number_key -- an array\
      else\
         --\
         -- An empty table...\
         --\
         if tostring(T) == \"JSON array\" then\
            return nil\
         elseif tostring(T) == \"JSON object\" then\
            return { }\
         else\
            -- have to guess, so we'll pick array, since empty arrays are likely more common than empty objects\
            return nil\
         end\
      end\
   else\
      --\
      -- An object, so return a list of keys\
      --\
      table.sort(string_keys)\
      return string_keys\
   end\
end\
\
--\
-- Encode\
--\
local encode_value -- must predeclare because it calls itself\
function encode_value(self, value, parents, etc)\
\
\
   if value == nil then\
      return 'null'\
   end\
\
   if type(value) == 'string' then\
      return json_string_literal(value)\
   elseif type(value) == 'number' then\
      if value ~= value then\
         --\
         -- NaN (Not a Number).\
         -- JSON has no NaN, so we have to fudge the best we can. This should really be a package option.\
         --\
         return \"null\"\
      elseif value >= math.huge then\
         --\
         -- Positive infinity. JSON has no INF, so we have to fudge the best we can. This should\
         -- really be a package option. Note: at least with some implementations, positive infinity\
         -- is both \">= math.huge\" and \"<= -math.huge\", which makes no sense but that's how it is.\
         -- Negative infinity is properly \"<= -math.huge\". So, we must be sure to check the \">=\"\
         -- case first.\
         --\
         return \"1e+9999\"\
      elseif value <= -math.huge then\
         --\
         -- Negative infinity.\
         -- JSON has no INF, so we have to fudge the best we can. This should really be a package option.\
         --\
         return \"-1e+9999\"\
      else\
         return tostring(value)\
      end\
   elseif type(value) == 'boolean' then\
      return tostring(value)\
\
   elseif type(value) ~= 'table' then\
      self:onEncodeError(\"can't convert \" .. type(value) .. \" to JSON\", etc)\
\
   else\
      --\
      -- A table to be converted to either a JSON object or array.\
      --\
      local T = value\
\
      if parents[T] then\
         self:onEncodeError(\"table \" .. tostring(T) .. \" is a child of itself\", etc)\
      else\
         parents[T] = true\
      end\
\
      local result_value\
\
      local object_keys, maximum_number_key = object_or_array(self, T, etc)\
      if maximum_number_key then\
         --\
         -- An array...\
         --\
         local ITEMS = { }\
         for i = 1, maximum_number_key do\
            table.insert(ITEMS, encode_value(self, T[i], parents, etc))\
         end\
\
         result_value = \"[\" .. table.concat(ITEMS, \",\") .. \"]\"\
      elseif object_keys then\
         --\
         -- An object\
         --\
\
         --\
         -- We'll always sort the keys, so that comparisons can be made on\
         -- the results, etc. The actual order is not particularly\
         -- important (e.g. it doesn't matter what character set we sort\
         -- as); it's only important that it be deterministic... the same\
         -- every time.\
         --\
         local PARTS = { }\
         for _, key in ipairs(object_keys) do\
            local encoded_key = encode_value(self, tostring(key), parents, etc)\
            local encoded_val = encode_value(self, T[key],        parents, etc)\
            table.insert(PARTS, string.format(\"%s:%s\", encoded_key, encoded_val))\
         end\
         result_value = \"{\" .. table.concat(PARTS, \",\") .. \"}\"\
      else\
         --\
         -- An empty array/object... we'll treat it as an array, though it should really be an option\
         --\
         result_value = \"[]\"\
      end\
\
      parents[T] = false\
      return result_value\
   end\
end\
\
local encode_pretty_value -- must predeclare because it calls itself\
function encode_pretty_value(self, value, parents, indent, etc)\
\
   if type(value) == 'string' then\
      return json_string_literal(value)\
\
   elseif type(value) == 'number' then\
      return tostring(value)\
\
   elseif type(value) == 'boolean' then\
      return tostring(value)\
\
   elseif type(value) == 'nil' then\
      return 'null'\
\
   elseif type(value) ~= 'table' then\
      self:onEncodeError(\"can't convert \" .. type(value) .. \" to JSON\", etc)\
\
   else\
      --\
      -- A table to be converted to either a JSON object or array.\
      --\
      local T = value\
\
      if parents[T] then\
         self:onEncodeError(\"table \" .. tostring(T) .. \" is a child of itself\", etc)\
      end\
      parents[T] = true\
\
      local result_value\
\
      local object_keys = object_or_array(self, T, etc)\
      if not object_keys then\
         --\
         -- An array...\
         --\
         local ITEMS = { }\
         for i = 1, #T do\
            table.insert(ITEMS, encode_pretty_value(self, T[i], parents, indent, etc))\
         end\
\
         result_value = \"[ \" .. table.concat(ITEMS, \", \") .. \" ]\"\
\
      else\
\
         --\
         -- An object -- can keys be numbers?\
         --\
\
         local KEYS = { }\
         local max_key_length = 0\
         for _, key in ipairs(object_keys) do\
            local encoded = encode_pretty_value(self, tostring(key), parents, \"\", etc)\
            max_key_length = math.max(max_key_length, #encoded)\
            table.insert(KEYS, encoded)\
         end\
         local key_indent = indent .. \"    \"\
         local subtable_indent = indent .. string.rep(\" \", max_key_length + 2 + 4)\
         local FORMAT = \"%s%\" .. tostring(max_key_length) .. \"s: %s\"\
\
         local COMBINED_PARTS = { }\
         for i, key in ipairs(object_keys) do\
            local encoded_val = encode_pretty_value(self, T[key], parents, subtable_indent, etc)\
            table.insert(COMBINED_PARTS, string.format(FORMAT, key_indent, KEYS[i], encoded_val))\
         end\
         result_value = \"{\\n\" .. table.concat(COMBINED_PARTS, \",\\n\") .. \"\\n\" .. indent .. \"}\"\
      end\
\
      parents[T] = false\
      return result_value\
   end\
end\
\
function OBJDEF:encode(value, etc)\
   if type(self) ~= 'table' or self.__index ~= OBJDEF then\
      OBJDEF:onEncodeError(\"JSON:encode must be called in method format\", etc)\
   end\
\
   local parents = {}\
   return encode_value(self, value, parents, etc)\
end\
\
function OBJDEF:encode_pretty(value, etc)\
   local parents = {}\
   local subtable_indent = \"\"\
   return encode_pretty_value(self, value, parents, subtable_indent, etc)\
end\
\
function OBJDEF.__tostring()\
   return \"JSON encode/decode package\"\
end\
\
OBJDEF.__index = OBJDEF\
\
function OBJDEF:new(args)\
   local new = { }\
\
   if args then\
      for key, val in pairs(args) do\
         new[key] = val\
      end\
   end\
\
   return setmetatable(new, OBJDEF)\
end\
\
return OBJDEF:new()\
",
},
-- Table: {37}
{
   ["hdmi_matrix_11"]={109},
   ["AUX_A"]={110},
   ["lg_hdmi_4"]={111},
   ["hdmi_4"]={112},
   ["spotify"]={113},
   ["hdmi_matrix_3"]={114},
   ["hdmi_matrix_1"]={115},
   ["toslink"]={116},
   ["hdmi_matrix_9"]={117},
   ["youtube"]={118},
   ["tunein"]={119},
   ["tv"]={120},
   ["recordings"]={121},
   ["hdmi_2"]={122},
   ["deezer"]={123},
   ["music"]={124},
   ["hdmi_1"]={125},
   ["hdmi_matrix_16"]={126},
   ["CD"]={127},
   ["lg_hdmi_3"]={128},
   ["hdmi_6"]={129},
   ["lg_hdmi_1"]={130},
   ["hdmi_matrix_2"]={131},
   ["dvb_radio"]={132},
   ["hdmi_matrix_5"]={133},
   ["sat"]={134},
   ["hdmi_matrix_8"]={135},
   ["homemedia"]={136},
   ["hdmi_matrix_14"]={137},
   ["netradio"]={138},
   ["TP2"]={139},
   ["webmedia"]={140},
   ["radio"]={141},
   ["TP1"]={142},
   ["linein"]={143},
   ["hdmi_matrix_13"]={144},
   ["hdmi_matrix_15"]={145},
   ["av"]={146},
   ["PH"]={147},
   ["hdmi_matrix_6"]={148},
   ["hdmi_matrix_4"]={149},
   ["hdmi_matrix_7"]={150},
   ["hdmi_matrix_12"]={151},
   ["hdmi_matrix_10"]={152},
   ["hdmi_5"]={153},
   ["hdmi_3"]={154},
},
-- Table: {38}
{
   ["_name"]="SendIDToMiniAppsTimer",
   ["_id"]=0,
   ["_units"]="SECONDS",
   ["_info"]="",
   ["_interval"]=5,
   ["_timerID"]=6,
},
-- Table: {39}
{
},
-- Table: {40}
{
   ["hdmi_matrix_11"]={155},
   ["AUX_A"]={156},
   ["lg_hdmi_4"]={157},
   ["hdmi_4"]={158},
   ["spotify"]={159},
   ["hdmi_matrix_3"]={160},
   ["hdmi_matrix_1"]={161},
   ["toslink"]={162},
   ["hdmi_matrix_9"]={163},
   ["youtube"]={164},
   ["tunein"]={165},
   ["tv"]={166},
   ["lg_hdmi_3"]={167},
   ["hdmi_2"]={168},
   ["deezer"]={169},
   ["music"]={170},
   ["hdmi_1"]={171},
   ["hdmi_matrix_16"]={172},
   ["CD"]={173},
   ["hdmi_6"]={174},
   ["hdmi_matrix_2"]={175},
   ["dvb_radio"]={176},
   ["hdmi_matrix_5"]={177},
   ["hdmi_matrix_8"]={178},
   ["sat"]={179},
   ["recordings"]={180},
   ["homemedia"]={181},
   ["netradio"]={182},
   ["webmedia"]={183},
   ["radio"]={184},
   ["linein"]={185},
   ["av"]={186},
   ["hdmi_matrix_13"]={187},
   ["hdmi_matrix_15"]={188},
   ["hdmi_matrix_14"]={189},
   ["lg_hdmi_1"]={190},
   ["hdmi_matrix_6"]={191},
   ["hdmi_matrix_4"]={192},
   ["hdmi_matrix_7"]={193},
   ["hdmi_matrix_12"]={194},
   ["hdmi_matrix_10"]={195},
   ["hdmi_5"]={196},
   ["hdmi_3"]={197},
},
-- Table: {41}
{
},
-- Table: {42}
{
   ["Speech"]={198},
   ["Automatic"]={199},
   ["Night listening"]={200},
   ["Custom"]={201},
   ["Music"]={202},
   ["Sports"]={203},
   ["Game"]={204},
   ["Movie"]={205},
   ["Drama"]={206},
},
-- Table: {43}
{
   ["Start-up"]={207},
},
-- Table: {44}
{
   ["Start-up"]={208},
   ["Standby"]={209},
},
-- Table: {45}
{
   ["standby"]="standby",
   ["on"]="on",
   ["allStandby"]="allStandby",
},
-- Table: {46}
{
   ["START_CH_UP"]="",
   ["CLOSE"]="",
   ["PULSE_CH_UP"]="",
   ["NUMBER_5"]="",
   ["PULSE_CH_DOWN"]="",
   ["PREV"]="",
   ["PUSLE_VOL_DOWN"]="",
   ["MUTE_TOGGLE"]="",
   ["INPUT_TOGGLE"]="",
   ["START_CH_DOWN"]="",
   ["GUIDE"]="",
   ["OFF"]="",
   ["DOWN"]="",
   ["STOP_CH_UP"]="",
   ["LEFT"]="",
   ["PROGRAM_C"]="",
   ["PROGRAM_D"]="",
   ["PROGRAM_B"]="",
   ["STOP_CH_DOWN"]="",
   ["CANCEL"]="",
   ["MUTE_ON"]="",
   ["PROGRAM_A"]="",
   ["STOP"]="",
   ["SKIP_REV"]="",
   ["SKIP_FWD"]="",
   ["DOT"]="",
   ["SCAN_FWD"]="",
   ["PLAY"]="",
   ["NUMBER_1"]="",
   ["SCAN_REV"]="",
   ["NUMBER_8"]="",
   ["ENTER"]="",
   ["UP"]="",
   ["OPEN_CLOSE"]="",
   ["OPEN"]="",
   ["PAUSE"]="",
   ["NUMBER_4"]="",
   ["NUMBER_9"]="",
   ["RIGHT"]="",
   ["NUMBER_7"]="",
   ["MUTE_OFF"]="",
   ["NUMBER_3"]="",
   ["PULSE_VOL_UP"]="",
   ["NUMBER_2"]="",
   ["NUMBER_0"]="",
   ["INFO"]="",
   ["PAGE_UP"]="",
   ["MENU"]="",
   ["RECALL"]="",
   ["PAGE_DOWN"]="",
   ["STAR"]="",
   ["ON"]="",
   ["NUMBER_6"]="",
},
-- Table: {47}
{
   ["_logLevel"]=5,
   ["_logName"]="BangOlufsen BeoVision-Eclipse-55",
},
-- Table: {48}
{
},
-- Table: {49}
{
},
-- Table: {50}
{
   ["BindingAddress"]="192.168.1.196",
},
-- Table: {51}
{
   ["_name"]="NetworkReconnectTimer",
   ["_id"]=0,
   ["_units"]="SECONDS",
   ["_info"]="",
   ["_interval"]=5,
   ["_timerID"]=5,
},
-- Table: {52}
{
   ["_name"]="RecoverInputSelectionTimer",
   ["_id"]=0,
   ["_units"]="SECONDS",
   ["_info"]="",
   ["_interval"]=2,
   ["_timerID"]=2,
},
-- Table: {53}
{
},
-- Table: {54}
{
},
-- Table: {55}
{
   {26},
   {52},
   {24},
   {23},
   {51},
   {38},
   {21},
   {8},
   {19},
},
-- Table: {56}
{
   ["preload"]={210},
   ["loaded"]={211},
   ["loaders"]={212},
   ["cpath"]="./?.so;/control4/lib/lua/5.1/?.so;/control4/lib/lua/5.1/loadall.so",
   ["config"]="/\
;\
?\
!\
-",
   ["path"]="/mnt/internal/c4z/BangOlufsen_tv-BeoVision_Eclipse-55/?.lua;/control4/drivers/lua/?.lua",
},
-- Table: {57}
{
},
-- Table: {58}
{
   [0]={213},
},
-- Table: {59}
{
   ["Power On Delay Seconds"]="12",
   ["Polling Interval Seconds"]="60",
   ["Power On Method"]="Wake On Lan",
   ["Debug Level"]="5 - Debug",
   ["Power Off Delay Seconds"]="8",
   ["Connected To Network"]="false",
   ["Debug Mode"]="Off",
   ["Device MAC Address"]="50:1E:2D:0A:24:F5",
   ["Volume Ramp Delay Milliseconds"]="100",
},
-- Table: {60}
{
},
-- Table: {61}
{
},
-- Table: {62}
{
   {214},
   {215},
   {216},
   {217},
   {218},
   {219},
   {220},
   {221},
   {222},
   {223},
   {224},
   {225},
   {226},
   {227},
   {228},
   {229},
   {230},
   {231},
   {232},
   {233},
   {234},
   {235},
   {236},
   {237},
   {238},
   {239},
   {240},
   {241},
   {242},
   {243},
   {244},
   {245},
   {246},
   {247},
   {248},
   {249},
   {250},
   {251},
   [0]={252},
   [40]={253},
   [41]={254},
   [42]={255},
   [44]={256},
   [103]={257},
   [102]={258},
   [101]={259},
   [43]={260},
},
-- Table: {63}
{
   ["huge"]=inf,
   ["pi"]=3.1415926535898,
},
-- Table: {64}
{
},
-- Table: {65}
{
},
-- Table: {66}
{
   ["id"]=2061954594,
   ["digit"]=2061954594,
},
-- Table: {67}
{
   ["id"]=3917592017,
   ["digit"]=3917592017,
},
-- Table: {68}
{
   ["id"]=2579698866,
   ["digit"]=2579698866,
},
-- Table: {69}
{
   ["id"]=891913577,
   ["digit"]=891913577,
},
-- Table: {70}
{
   ["id"]=3543073154,
   ["digit"]=3543073154,
},
-- Table: {71}
{
   ["id"]=216531034,
   ["digit"]=216531034,
},
-- Table: {72}
{
   ["id"]=2199494322,
   ["digit"]=2199494322,
},
-- Table: {73}
{
   ["id"]=1952840746,
   ["digit"]=1952840746,
},
-- Table: {74}
{
   ["id"]=1569423591,
   ["digit"]=1569423591,
},
-- Table: {75}
{
},
-- Table: {76}
{
   ["last"]=-1,
   ["first"]=0,
},
-- Table: {77}
{
   ["TICKET"]=8,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {78}
{
   ["TICKET"]=11,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {79}
{
   ["TICKET"]=13,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {80}
{
   ["TICKET"]=18,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {81}
{
   ["TICKET"]=20,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {82}
{
   ["TICKET"]=26,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {83}
{
   ["TICKET"]=28,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Sound/Volume/Speaker/Level",
},
-- Table: {84}
{
   ["TICKET"]=31,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {85}
{
   ["TICKET"]=33,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {86}
{
   ["TICKET"]=37,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {87}
{
   ["TICKET"]=39,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {88}
{
   ["TICKET"]=42,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {89}
{
   ["TICKET"]=44,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {90}
{
   ["TICKET"]=47,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {91}
{
   ["TICKET"]=50,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {92}
{
   ["TICKET"]=52,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {93}
{
   ["TICKET"]=55,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {94}
{
   ["TICKET"]=58,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {95}
{
   ["TICKET"]=60,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {96}
{
   ["TICKET"]=63,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {97}
{
   ["TICKET"]=66,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {98}
{
   ["TICKET"]=68,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {99}
{
   ["TICKET"]=71,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {100}
{
   ["TICKET"]=74,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {101}
{
   ["TICKET"]=76,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {102}
{
   ["TICKET"]=79,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {103}
{
   ["TICKET"]=82,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {104}
{
   ["TICKET"]=84,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {105}
{
   ["TICKET"]=87,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {106}
{
   ["TICKET"]=90,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {107}
{
   ["TICKET"]=92,
   ["URL"]="192.168.1.196:8080/BeoZone/Zone/Picture/Format/2d3d",
},
-- Table: {108}
{
   ["__index"]={108},
   ["URL"]="http://regex.info/blog/",
   ["VERSION"]=20111207.5,
   ["COPYRIGHT"]="2010-2011 Jeffrey Friedl",
},
-- Table: {109}
{
   ["ID"]=17,
   ["BindingID"]=5001,
},
-- Table: {110}
{
   ["ID"]=28,
   ["BindingID"]=5001,
},
-- Table: {111}
{
   ["ID"]=103,
   ["BindingID"]=5001,
},
-- Table: {112}
{
   ["ID"]=4,
   ["BindingID"]=5001,
},
-- Table: {113}
{
   ["ID"]=33,
   ["BindingID"]=5001,
},
-- Table: {114}
{
   ["ID"]=9,
   ["BindingID"]=5001,
},
-- Table: {115}
{
   ["ID"]=7,
   ["BindingID"]=5001,
},
-- Table: {116}
{
   ["ID"]=40,
   ["BindingID"]=5001,
},
-- Table: {117}
{
   ["ID"]=15,
   ["BindingID"]=5001,
},
-- Table: {118}
{
   ["ID"]=32,
   ["BindingID"]=5001,
},
-- Table: {119}
{
   ["ID"]=37,
   ["BindingID"]=5001,
},
-- Table: {120}
{
   ["ID"]=0,
   ["BindingID"]=5001,
},
-- Table: {121}
{
   ["ID"]=42,
   ["BindingID"]=5001,
},
-- Table: {122}
{
   ["ID"]=2,
   ["BindingID"]=5001,
},
-- Table: {123}
{
   ["ID"]=30,
   ["BindingID"]=5001,
},
-- Table: {124}
{
   ["ID"]=38,
   ["BindingID"]=5001,
},
-- Table: {125}
{
   ["ID"]=1,
   ["BindingID"]=5001,
},
-- Table: {126}
{
   ["ID"]=22,
   ["BindingID"]=5001,
},
-- Table: {127}
{
   ["ID"]=25,
   ["BindingID"]=5001,
},
-- Table: {128}
{
   ["ID"]=102,
   ["BindingID"]=5001,
},
-- Table: {129}
{
   ["ID"]=6,
   ["BindingID"]=5001,
},
-- Table: {130}
{
   ["ID"]=101,
   ["BindingID"]=5001,
},
-- Table: {131}
{
   ["ID"]=8,
   ["BindingID"]=5001,
},
-- Table: {132}
{
   ["ID"]=43,
   ["BindingID"]=5001,
},
-- Table: {133}
{
   ["ID"]=11,
   ["BindingID"]=5001,
},
-- Table: {134}
{
   ["ID"]=44,
   ["BindingID"]=5001,
},
-- Table: {135}
{
   ["ID"]=14,
   ["BindingID"]=5001,
},
-- Table: {136}
{
   ["ID"]=31,
   ["BindingID"]=5001,
},
-- Table: {137}
{
   ["ID"]=20,
   ["BindingID"]=5001,
},
-- Table: {138}
{
   ["ID"]=35,
   ["BindingID"]=5001,
},
-- Table: {139}
{
   ["ID"]=29,
   ["BindingID"]=5001,
},
-- Table: {140}
{
   ["ID"]=34,
   ["BindingID"]=5001,
},
-- Table: {141}
{
   ["ID"]=41,
   ["BindingID"]=5001,
},
-- Table: {142}
{
   ["ID"]=27,
   ["BindingID"]=5001,
},
-- Table: {143}
{
   ["ID"]=24,
   ["BindingID"]=5001,
},
-- Table: {144}
{
   ["ID"]=19,
   ["BindingID"]=5001,
},
-- Table: {145}
{
   ["ID"]=21,
   ["BindingID"]=5001,
},
-- Table: {146}
{
   ["ID"]=23,
   ["BindingID"]=5001,
},
-- Table: {147}
{
   ["ID"]=36,
   ["BindingID"]=5001,
},
-- Table: {148}
{
   ["ID"]=12,
   ["BindingID"]=5001,
},
-- Table: {149}
{
   ["ID"]=10,
   ["BindingID"]=5001,
},
-- Table: {150}
{
   ["ID"]=13,
   ["BindingID"]=5001,
},
-- Table: {151}
{
   ["ID"]=18,
   ["BindingID"]=5001,
},
-- Table: {152}
{
   ["ID"]=16,
   ["BindingID"]=5001,
},
-- Table: {153}
{
   ["ID"]=5,
   ["BindingID"]=5001,
},
-- Table: {154}
{
   ["ID"]=3,
   ["BindingID"]=5001,
},
-- Table: {155}
{
   ["sourceType"]={261},
},
-- Table: {156}
{
   ["sourceType"]={262},
},
-- Table: {157}
{
   ["sourceType"]={263},
},
-- Table: {158}
{
   ["sourceType"]={264},
},
-- Table: {159}
{
   ["sourceType"]={265},
},
-- Table: {160}
{
   ["sourceType"]={266},
},
-- Table: {161}
{
   ["sourceType"]={267},
},
-- Table: {162}
{
   ["sourceType"]={268},
},
-- Table: {163}
{
   ["sourceType"]={269},
},
-- Table: {164}
{
   ["sourceType"]={270},
},
-- Table: {165}
{
   ["sourceType"]={271},
},
-- Table: {166}
{
   ["sourceType"]={272},
},
-- Table: {167}
{
   ["sourceType"]={273},
},
-- Table: {168}
{
   ["sourceType"]={274},
},
-- Table: {169}
{
   ["sourceType"]={275},
},
-- Table: {170}
{
   ["sourceType"]={276},
},
-- Table: {171}
{
   ["sourceType"]={277},
},
-- Table: {172}
{
   ["sourceType"]={278},
},
-- Table: {173}
{
   ["sourceType"]={279},
},
-- Table: {174}
{
   ["sourceType"]={280},
},
-- Table: {175}
{
   ["sourceType"]={281},
},
-- Table: {176}
{
   ["sourceType"]={282},
},
-- Table: {177}
{
   ["sourceType"]={283},
},
-- Table: {178}
{
   ["sourceType"]={284},
},
-- Table: {179}
{
   ["sourceType"]={285},
},
-- Table: {180}
{
   ["sourceType"]={286},
},
-- Table: {181}
{
   ["sourceType"]={287},
},
-- Table: {182}
{
   ["sourceType"]={288},
},
-- Table: {183}
{
   ["sourceType"]={289},
},
-- Table: {184}
{
   ["sourceType"]={290},
},
-- Table: {185}
{
   ["sourceType"]={291},
},
-- Table: {186}
{
   ["sourceType"]={292},
},
-- Table: {187}
{
   ["sourceType"]={293},
},
-- Table: {188}
{
   ["sourceType"]={294},
},
-- Table: {189}
{
   ["sourceType"]={295},
},
-- Table: {190}
{
   ["sourceType"]={296},
},
-- Table: {191}
{
   ["sourceType"]={297},
},
-- Table: {192}
{
   ["sourceType"]={298},
},
-- Table: {193}
{
   ["sourceType"]={299},
},
-- Table: {194}
{
   ["sourceType"]={300},
},
-- Table: {195}
{
   ["sourceType"]={301},
},
-- Table: {196}
{
   ["sourceType"]={302},
},
-- Table: {197}
{
   ["sourceType"]={303},
},
-- Table: {198}
{
   ["id"]=3,
   ["digit"]=3,
},
-- Table: {199}
{
   ["id"]=0,
   ["digit"]=0,
},
-- Table: {200}
{
   ["id"]=7,
   ["digit"]=7,
},
-- Table: {201}
{
   ["id"]=8,
   ["digit"]=8,
},
-- Table: {202}
{
   ["id"]=6,
   ["digit"]=6,
},
-- Table: {203}
{
   ["id"]=5,
   ["digit"]=5,
},
-- Table: {204}
{
   ["id"]=2,
   ["digit"]=2,
},
-- Table: {205}
{
   ["id"]=1,
   ["digit"]=1,
},
-- Table: {206}
{
   ["id"]=4,
   ["digit"]=4,
},
-- Table: {207}
{
   ["id"]=0,
   ["digit"]=1,
},
-- Table: {208}
{
   ["id"]=0,
},
-- Table: {209}
{
   ["id"]=1,
},
-- Table: {210}
{
},
-- Table: {211}
{
   ["string"]={15},
   ["debug"]={5},
   ["package"]={56},
   ["_G"]={1},
   ["json"]={304},
   ["sqlite3"]={3},
   ["io"]={48},
   ["os"]={60},
   ["table"]={18},
   ["math"]={63},
   ["socket"]={7},
   ["coroutine"]={11},
   ["bit"]={57},
},
-- Table: {212}
{
},
-- Table: {213}
{
   ["mode"]="",
},
-- Table: {214}
{
   ["Name"]="hdmi_1",
   ["BindingID"]=5001,
},
-- Table: {215}
{
   ["Name"]="hdmi_2",
   ["BindingID"]=5001,
},
-- Table: {216}
{
   ["Name"]="hdmi_3",
   ["BindingID"]=5001,
},
-- Table: {217}
{
   ["Name"]="hdmi_4",
   ["BindingID"]=5001,
},
-- Table: {218}
{
   ["Name"]="hdmi_5",
   ["BindingID"]=5001,
},
-- Table: {219}
{
   ["Name"]="hdmi_6",
   ["BindingID"]=5001,
},
-- Table: {220}
{
   ["Name"]="hdmi_matrix_1",
   ["BindingID"]=5001,
},
-- Table: {221}
{
   ["Name"]="hdmi_matrix_2",
   ["BindingID"]=5001,
},
-- Table: {222}
{
   ["Name"]="hdmi_matrix_3",
   ["BindingID"]=5001,
},
-- Table: {223}
{
   ["Name"]="hdmi_matrix_4",
   ["BindingID"]=5001,
},
-- Table: {224}
{
   ["Name"]="hdmi_matrix_5 ",
   ["BindingID"]=5001,
},
-- Table: {225}
{
   ["Name"]="hdmi_matrix_6",
   ["BindingID"]=5001,
},
-- Table: {226}
{
   ["Name"]="hdmi_matrix_7",
   ["BindingID"]=5001,
},
-- Table: {227}
{
   ["Name"]="hdmi_matrix_8",
   ["BindingID"]=5001,
},
-- Table: {228}
{
   ["Name"]="hdmi_matrix_9",
   ["BindingID"]=5001,
},
-- Table: {229}
{
   ["Name"]="hdmi_matrix_10",
   ["BindingID"]=5001,
},
-- Table: {230}
{
   ["Name"]="hdmi_matrix_11",
   ["BindingID"]=5001,
},
-- Table: {231}
{
   ["Name"]="hdmi_matrix_12",
   ["BindingID"]=5001,
},
-- Table: {232}
{
   ["Name"]="hdmi_matrix_13",
   ["BindingID"]=5001,
},
-- Table: {233}
{
   ["Name"]="hdmi_matrix_14",
   ["BindingID"]=5001,
},
-- Table: {234}
{
   ["Name"]="hdmi_matrix_15",
   ["BindingID"]=5001,
},
-- Table: {235}
{
   ["Name"]="hdmi_matrix_16",
   ["BindingID"]=5001,
},
-- Table: {236}
{
   ["Name"]="av",
   ["BindingID"]=5001,
},
-- Table: {237}
{
   ["Name"]="linein",
   ["BindingID"]=5001,
},
-- Table: {238}
{
   ["Name"]="CD",
   ["BindingID"]=5001,
},
-- Table: {239}
{
   ["Name"]="dvb_radio",
   ["BindingID"]=5001,
},
-- Table: {240}
{
   ["Name"]="TP1",
   ["BindingID"]=5001,
},
-- Table: {241}
{
   ["Name"]="AUX_A",
   ["BindingID"]=5001,
},
-- Table: {242}
{
   ["Name"]="TP2",
   ["BindingID"]=5001,
},
-- Table: {243}
{
   ["Name"]="deezer",
   ["BindingID"]=5001,
},
-- Table: {244}
{
   ["Name"]="homemedia",
   ["BindingID"]=5001,
},
-- Table: {245}
{
   ["Name"]="youtube",
   ["BindingID"]=5001,
},
-- Table: {246}
{
   ["Name"]="spotify",
   ["BindingID"]=5001,
},
-- Table: {247}
{
   ["Name"]="webmedia",
   ["BindingID"]=5001,
},
-- Table: {248}
{
   ["Name"]="netradio",
   ["BindingID"]=5001,
},
-- Table: {249}
{
   ["Name"]="PH",
   ["BindingID"]=5001,
},
-- Table: {250}
{
   ["Name"]="tunein",
   ["BindingID"]=5001,
},
-- Table: {251}
{
   ["Name"]="music",
   ["BindingID"]=5001,
},
-- Table: {252}
{
   ["Name"]="tv",
   ["BindingID"]=5001,
},
-- Table: {253}
{
   ["Name"]="toslink",
   ["BindingID"]=5001,
},
-- Table: {254}
{
   ["Name"]="radio",
   ["BindingID"]=5001,
},
-- Table: {255}
{
   ["Name"]="recordings",
   ["BindingID"]=5001,
},
-- Table: {256}
{
   ["Name"]="sat",
   ["BindingID"]=5001,
},
-- Table: {257}
{
   ["Name"]="lg_hdmi_4",
   ["BindingID"]=5001,
},
-- Table: {258}
{
   ["Name"]="lg_hdmi_3",
   ["BindingID"]=5001,
},
-- Table: {259}
{
   ["Name"]="lg_hdmi_1",
   ["BindingID"]=5001,
},
-- Table: {260}
{
   ["Name"]="dvb_radio",
   ["BindingID"]=5001,
},
-- Table: {261}
{
   ["connector"]=11,
   ["type"]="MATRIX",
},
-- Table: {262}
{
   ["type"]="A.AUX",
},
-- Table: {263}
{
   ["connector"]=14,
   ["type"]="HDMI",
},
-- Table: {264}
{
   ["connector"]=4,
   ["type"]="HDMI",
},
-- Table: {265}
{
   ["type"]="SPOTIFY",
},
-- Table: {266}
{
   ["connector"]=3,
   ["type"]="MATRIX",
},
-- Table: {267}
{
   ["connector"]=1,
   ["type"]="MATRIX",
},
-- Table: {268}
{
   ["type"]="TOS LINK",
},
-- Table: {269}
{
   ["connector"]=9,
   ["type"]="MATRIX",
},
-- Table: {270}
{
   ["type"]="YOUTUBE",
},
-- Table: {271}
{
   ["type"]="TUNEIN",
},
-- Table: {272}
{
   ["type"]="TV",
},
-- Table: {273}
{
   ["connector"]=13,
   ["type"]="HDMI",
},
-- Table: {274}
{
   ["connector"]=2,
   ["type"]="HDMI",
},
-- Table: {275}
{
   ["type"]="DEEZER",
},
-- Table: {276}
{
   ["type"]="MUSIC",
},
-- Table: {277}
{
   ["connector"]=1,
   ["type"]="HDMI",
},
-- Table: {278}
{
   ["connector"]=16,
   ["type"]="MATRIX",
},
-- Table: {279}
{
   ["type"]="CD",
},
-- Table: {280}
{
   ["connector"]=6,
   ["type"]="HDMI",
},
-- Table: {281}
{
   ["connector"]=2,
   ["type"]="MATRIX",
},
-- Table: {282}
{
   ["type"]="DVB_RADIO",
},
-- Table: {283}
{
   ["connector"]=5,
   ["type"]="MATRIX",
},
-- Table: {284}
{
   ["connector"]=8,
   ["type"]="MATRIX",
},
-- Table: {285}
{
   ["type"]="SAT",
},
-- Table: {286}
{
   ["type"]="RECORDINGS",
},
-- Table: {287}
{
   ["type"]="HOMEMEDIA",
},
-- Table: {288}
{
   ["type"]="NET RADIO",
},
-- Table: {289}
{
   ["type"]="WEBMEDIA",
},
-- Table: {290}
{
   ["type"]="RADIO",
},
-- Table: {291}
{
   ["type"]="LINE IN",
},
-- Table: {292}
{
   ["type"]="AV IN",
},
-- Table: {293}
{
   ["connector"]=13,
   ["type"]="MATRIX",
},
-- Table: {294}
{
   ["connector"]=15,
   ["type"]="MATRIX",
},
-- Table: {295}
{
   ["connector"]=14,
   ["type"]="MATRIX",
},
-- Table: {296}
{
   ["connector"]=11,
   ["type"]="HDMI",
},
-- Table: {297}
{
   ["connector"]=6,
   ["type"]="MATRIX",
},
-- Table: {298}
{
   ["connector"]=4,
   ["type"]="MATRIX",
},
-- Table: {299}
{
   ["connector"]=7,
   ["type"]="MATRIX",
},
-- Table: {300}
{
   ["connector"]=12,
   ["type"]="MATRIX",
},
-- Table: {301}
{
   ["connector"]=10,
   ["type"]="MATRIX",
},
-- Table: {302}
{
   ["connector"]=5,
   ["type"]="HDMI",
},
-- Table: {303}
{
   ["connector"]=3,
   ["type"]="HDMI",
},
-- Table: {304}
{
},
}